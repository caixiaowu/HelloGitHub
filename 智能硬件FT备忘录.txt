svn地址 http://tc-svn.tencent.com/isd/isd_iotsmartdevice_rep/iot_smart_device_proj/trunk/trunk
访问svn无权限
1 确定svn地址是10.14.40.10
2 确定开发机登陆用户有访问对应svn路径权限(zifengcai不是user_00)

host路径
C:\Windows\System32\drivers\etc

智能硬件记录
1 20150211 
触发器规则和设备动作 管理端工具
调用cgi：
	在php里面hardcode直接调用现网cgi
		$url_set_rule = "http://10.185.8.28/cgi-bin/appstage/mqz_device_set_ruleengine";
	文件路径：
		F:\work\Trunk\application\platform\openapi_v3\cgi\mng\mqzone\src\mqz_device_get_ruleengine.cpp
php页面：管理端两台机器
	10.130.2.105(10.133.4.9)/data/release/page/admin/web/openapi/rule_action_helper.html

	入口：/data/release/page/admin/web/openapi/index.php

2 jce2cpp
	生成工具在http://bbs.mqq.com/taf/taf.jsp

3 搭建spp插件 trunk/application/platform/open_smart_device/server/spp_linkup_cloud
	1 jce生成.h文件，引用的时候除了引入头文件，还要加上namespace即包名
	2 JceInputStream --> using namespace taf;
	3 open_oidb_api.h: No such file or directory
		在makefile里面添加OPEN_OIDB\ 的库引用
	4 string_util.h: No such file or directory
		在makefile里面添加OPEN_BASE \ 的库引用 小窍门:看一下缺少的文件在哪个目录根据目录猜测库名
		\Trunk\base_class\src\open_base\inc
	5 'ERROR_LOG' was not declared in this scope
		LOG_DEBUG重复定义的问题，去掉makefile中关于SPP\的链接，使用inc/spp_dev下的sppincl.h
	6 "json.h" 和 "json/json.h"
		都加上去试试 可能会重定义 把json.h去掉吧
	7 对于最后链接的时候出现函数名没定义的情况，可能是函数没实现或者链接的库顺序不对，独立库基础库放后面
		HTTP_REQUEST_HELPER \
     	OPEN_OIDB\
     放到前面吧
    8 写完server后再写个share也就是api和测试的tool。
    9 tool的编译 直接在make tool makefile已经完成，擦以前都不知道，可以看下文件。
    10 share编译出个.a 需要在server的时候链接进去
    	修改macro_base.mk
    	grep RULE_ENGINE_API ./*
			./macro_base.mk:INC_RULE_ENGINE_API=-I$(project_home)/application/platform/open_smart_device/share/rule_engine_share/inc
			./macro_base.mk:LIB_RULE_ENGINE_API=-L$(project_home)/application/platform/open_smart_device/share/rule_engine_share/lib -lrule_engine
	11 tcpdump监听某个端口，有输出只能说明有发包，但可能是---ICMP 10.137.152.102 udp port 9970 unreachable
	12 打开core文件需要配置server的init.xml和系统的ulimit，core文件在/data/coredump下
	gdb spp_linkup_cloud_worker /data/coredump/core_spp_linkup_clou_1425606770 
	ps -ef | grep open_device查看父进程
	user_00   2688 17294  0 19:24 pts/28   00:00:00 /usr/local/services/open_device_proxy-1.0/bin/open_device_proxy
	user_00  17294     1  0 19:17 pts/28   00:00:00 /usr/local/services/open_device_proxy-1.0/bin/open_device_proxy
	gdb open_device_proxy
	attach 2688
	c

	13 cgi device_set_cloud_register
		放在10.137.152.102 /data/release/platform/cgi-bin/smart_device
	设备注册绑定cgi
		curl -i "10.130.128.170/cgi-bin/smart_device/device_set_cloud_register?pid=1000000398&uin=593579000&tinyid=144115196838167353&device_serial_num=ecfe8675-e809-4d&A2key=6D014945E9F5568CA8ED82AF85BECF264CF5D056D7B45272D075640932D2BE86F339313CD00219F3114B616276045AC403EA1F8916008E469750F60C1ACF37013F7442601C74F95E&device_licence=3045022100FA14F48A76EC3E5E7EDDC51EDF6B5DCFC71EDC28365897E74F0F038218D84AD60220233E7036AF5905A3C1307FB80E16025C6CA6B39D602B9BA6611AE210B4D9BC23&telnum=15820478555&dev_type=1&dev_os_ver=1.0.1&appname=shouq&app_version=5.4&mobile_serial_num=597855DDAA1245&mobile_imei=5&mobile_iccid=5&device_name=printer&appid=16;" -b "uin=593579000; skey=TnU1oAcAcd"
	推送文件测试工具
		./tool_push_ducoment_to_printer_api 1000000398 144115197813846840 10086 print.doc /data/zifengcai/tools/tool_spp_linkup_cloud/print.doc

	14 device_set_register_printer初始化调用api的方法,(CLinkupCloudApi  g_Api;)
		server的share文件里根据g_api的modeflag来获取L5，这里使用modefalg=API_API，读取文件的配置open.ini
	15 配置完open.ini需要重启qzhttp
	16 从第三方云获取licence hardcode
		curl -i "http://10.137.152.102:80/cgi-bin/smart_device/printer_get_device_register_info?pid=1000000"

	17 网上下个protobuf工具包 解压./configure make make check make install
		路径在10.12.198.50 /data/zifengcai/tool/protobuf/protobuf-2.4.1
	protoc: error while loading shared libraries: libprotobuf.so.7: cannot open shared object file: No such file or directory 
	这是因为系统找不到lib库 root@roson-vm:/home/protobuf# gedit /etc/ld.so.conf
	最后一行修改如下： include /etc/ld.so.conf.d/*.conf /usr/local/lib 然后ldconfig
	18 hp用的是ubuntu下此目录的licence /home/zifengcai/work/something/license/test
	19 客户端-->sso-->im_msg-->open_smart_proxy 
		sso主要承接客户端请求，然后交给im_msg，im_msg除了可以支持sso来的协议，也支持从内部直接访问im_msg(两种协议包头不同，因此需要各自开发支持)


4 LOG_TRACE = 0
  LOG_DEBUG = 1
  LOG_NOMAL = 2
  LOG_ERROR = 3

5 测试cgi的都放在10.137.152.102下吧
	curl -i "http://10.130.128.170/cgi-bin/smart_device/device_download_doc?pid=1000000398&tinyid=144115197820063773&din=144115194518818081&dev_type=1&device_name=printer&device_sn=3DF7D3F1D2FA478a&A2key=392AE68A727228E3C9350EC56AD98C54C263DB8A6A4BB8725D009A21CB37BAB9F7DF906D41196A802A75723459132A5E4C4378892E4109D217944687A141611E485E59BE695B160B&uuid=/7318c20c-e516-4187-87dc-0a9455c6eb90&job_seq_num=12345" -b "uin=592265304; skey=TNafksTvha"

	curl -i "http://10.130.128.170/cgi-bin/smart_device/device_download_doc?pid=1000000398&tinyid=144115197820063773&din=144115194518839219&dev_type=1000&device_name=printer&A2key=7483345FE90741115924A0C6E1906729A95D5DED67158AE8F95EC278C7596BA21BBE8C916CA005DAC7DC33CF8755144217A93FD5AC79B32BC221BDD08826A55FCADCDE5F9F28520B&job_seq_num=557546930176&doc_key=%2Ffb97639f-315c-4027-8caa-01570a003751&uin=592265304&url=&cookie=&filename=Screenshot_2015-06-01-16-38-24.png&device_sn=6C8CCE1DEB934b4a" -b "uin=592265304; skey=TNafksTvha"

6 智能设备整体流程如下
    客户端-->SSO-->im_msg-->open_device_proxy-->api_gw_device-->cgi(device_set_cloud_register)-->spp_linkup_cloud

7 pidinfo里面增加一个标志第三方云属性
	1 客户端通过device_proxy发送拉取pidinfo请求(pb协议)
	2 proxy转成http请求调用cgi
	3 pidinfo直接拉取tmem信息所以只有share没有server
	4 open_device_proxy 
		调用cgi后回包是在RecvFromServerOver-->PacketGetPidInfoResToClient
8 open_device_proxy-->api_gw_device
	proxy主要做pb和http协议格式的转换，调用cgi的路径在api_gw_device里配置

9 部署cmlb?170上丢cgi测试，mark 如果是新机器应该如何部署

10 
通过代理下载文件
curl -x 10.133.2.27:443 -o IMG20150320141818.jpg "http://59.37.107.11:80/ftn_handler/d6325c1823df965e0ae097489d4d1d69422a6947f7d33d9f0633b6992c7ef594e7b9858f19c1abcc7da6a01efcb646d9864e0bc586c6ddd4e61be30f14dd70de" -b "Cookie: FTN5K=f0fe020c"

curl -i "http://10.137.152.102/cgi-bin/smart_device/device_download_doc?pid=1000000398&tinyid=144115197820063773&din=144115194518819297&dev_type=1000&device_name=printer&A2key=FEFA4D7036137609B5AF711C5C1F8F2E5ECF5DF7AB619322691CD27DCCFA70B5AD787FF3AFAE0D6A8DAE7EA5CBFDAAC15E4FD208E8DEBF6F7FE4CBC181A7BD934A711212DBFC62E3&job_seq_num=347118174208&doc_key=/cb41b714-4ff4-4fe7-a74a-f7fb6af960b4&device_sn=ecfe8675-e809-4d&url=http://59.37.107.11:80/ftn_handler/d6325c1823df965e0ae097489d4d1d69422a6947f7d33d9f0633b6992c7ef594e7b9858f19c1abcc7da6a01efcb646d9864e0bc586c6ddd4e61be30f14dd70de&cookie=f0fe020c&filename=IMG20150320141818.jpg&uin=592265304" -b "uin=592265304; skey=TNafksTvha"

A2key=FEFA4D7036137609B5AF711C5C1F8F2E5ECF5DF7AB619322691CD27DCCFA70B5AD787FF3AFAE0D6A8DAE7EA5CBFDAAC15E4FD208E8DEBF6F7FE4CBC181A7BD934A711212DBFC62E3,sn=6C8CCE1DEB934b4a,job_seq_num=363399217152,tinyid=144115197820063773,din=1
44115194518819949,uuid=/cb41b714-4ff4-4fe7-a74a-f7fb6af960b4

11 查询当前目录大于xx的文件
	find ./ -size +204800

12 两个测试号码
	592265304 tencent.com 
	2219304433 tencent.com

未做的事
1 读取得到cmlb配置,后台换取文件url需要用到
appinfo.xml
	<im_s2c_conf>
        <cmlb_appid>5422</cmlb_appid>
        <is_test>0</is_test>
    </im_s2c_conf>

2 增加pid_info里面得云对接类型和ip端口
F:\work\Trunk\application\platform\open_smart_device\share\pid_info_tmem_api\src

3 s2c命令字


OPEN_OIDB_L5_MODID=337291
OPEN_OIDB_L5_CMDID=262144




gearman安装使用
1 https://launchpad.net/gearmand 下载最新的c版本 Latest version is 1.1.12
2 解压缩安装
	./configure
	make
	make install
	gearman 		验证安装完成
	缺少的库
	gcc 			ftp://ftp.gnu.org/gnu/gcc
	gperf 			http://www.gnu.org/software/gperf/
	libuuid 		http://sourceforge.net/projects/libuuid/?source=typ_redirect


云文件系统
使用非阻塞异步curl+epoll框架(代码仿照spp_linkup_cloud的spp框架写成 函数名称没有改 非常简陋 不排除一堆bug)
tool工具指向102测试环境，监听9701端口(spp_linkup_cloud是9700)
 ./L5GetRoute1 15411 15411 10
 	ip is :10.137.152.102 port is :9701





CURL_POLL_NONE (0)
	register, not interested in readiness (yet)
CURL_POLL_IN (1)
	register, interested in read readiness
CURL_POLL_OUT (2)
	register, interested in write readiness
CURL_POLL_INOUT (3)
	register, interested in both read and write readiness
CURL_POLL_REMOVE (4)
	unregister



设备群需求
启动时间20150413 

1 修改cgi app_set_datapoint
	将L5 指向170 注意用完切回来 云打印的东西部署在上面
  测试发包

    curl -i "10.133.2.9/cgi-bin/smart_device/device_set_business_info?tinyid=2456251308&din=144115192371343683&uin=2456251308&A2key=23E1A99A4012F992939DE88959C68611AC8CF2D08570C8659D4A0E04F7B57C5BD68517482A4DEBA71602241377C962FE053BCA6E3DDBDBB219BA5986DF32067DE4C0130610196596&index_begin=0&bit_count=1&bit_value=0"


    curl -i "10.133.1.201/cgi-bin/smart_device/app_set_datapoint?appid=16&tinyid=144115197917277785&din=144115192371347714&uin=360949607&session_key=E5C6E53713C659B85ADA374649B2588DB43675A43FB14556E5C3396309CB682C8D9FD9DC7812EE6AE960CE3D5F4A9F3D7451173B7141A640509D997081749146213C4E7050586A11&data=%7B%22data%22%3A%5B%7B%22pointval%22%3A%22%7B%5C%22appear_time%5C%22%3A1430203841%2C%5C%22from_uin%5C%22%3A2456251308%2C%5C%22msg_time%5C%22%3A1430203841%2C%5C%22to_din%5C%22%3A144115192371343683%7D%22%2C%22propertyid%22%3A9999%2C%22seq%22%3A%229999_144115196801645627_b1bec1878977b14cadd0af88524e4421%22%2C%22valtype%22%3A%22string%22%7D%5D%7D%0A"

    curl -i "10.130.128.170/cgi-bin/smart_device/device_get_public_device_list?tinyid=2456251308&din=144115194518836127&uin=2456251308&A2key=23E1A99A4012F992939DE88959C68611AC8CF2D08570C8659D4A0E04F7B57C5BD68517482A4DEBA71602241377C962FE053BCA6E3DDBDBB219BA5986DF32067DE4C0130610196596"

    10.148.142.163

    curl -i "10.130.128.170/cgi-bin/smart_device/device_set_public_device?tinyid=2456251308&din=144115192371351091&uin=2456251308&A2key=23E1A99A4012F992939DE88959C68611AC8CF2D08570C8659D4A0E04F7B57C5BD68517482A4DEBA71602241377C962FE053BCA6E3DDBDBB219BA5986DF32067DE4C0130610196596&type=2&name=旧的&screenshot=http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/slot4.png&icon=http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/20150507dengdeng.png&summary=九九九&attribute=1&slot=3&sn=33333&is_reg=0"

    curl -i "10.130.128.170/cgi-bin/smart_device/device_get_device_entry_list?tinyid=2456251308&din=144115192371343683&uin=2456251308&A2key=23E1A99A4012F992939DE88959C68611AC8CF2D08570C8659D4A0E04F7B57C5BD68517482A4DEBA71602241377C962FE053BCA6E3DDBDBB219BA5986DF32067DE4C0130610196596"

    curl -i "10.133.2.9/cgi-bin/smart_device/device_alloc_pid_pkey?uin=3137472737&skey=@UgLeHZpzw"

    curl -i "10.148.142.163/cgi-bin/smart_device/device_get_public_device_list?tinyid=2456251308&din=144115192371343683&uin=2456251308&A2key=23E1A99A4012F992939DE88959C68611AC8CF2D08570C8659D4A0E04F7B57C5BD68517482A4DEBA71602241377C962FE053BCA6E3DDBDBB219BA5986DF32067DE4C0130610196596"
    device.qq.com
    curl -i "172.27.193.254/cgi-bin/smart_device/device_get_public_device_list?tinyid=2456251308&din=144115192371343683&uin=2456251308&A2key=23E1A99A4012F992939DE88959C68611AC8CF2D08570C8659D4A0E04F7B57C5BD68517482A4DEBA71602241377C962FE053BCA6E3DDBDBB219BA5986DF32067DE4C0130610196596"
    http://172.27.193.254/cgi-bin/smart_device/device_get_public_device_list?tinyid=2456251308&din=144115192371343683&uin=2456251308&A2key=23E1A99A4012F992939DE88959C68611AC8CF2D08570C8659D4A0E04F7B57C5BD68517482A4DEBA71602241377C962FE053BCA6E3DDBDBB219BA5986DF32067DE4C0130610196596

     curl -i "10.133.5.201/cgi-bin/smart_device/device_get_device_entry_list?tinyid=2456251308&din=144115192371343683&uin=2456251308&A2key=23E1A99A4012F992939DE88959C68611AC8CF2D08570C8659D4A0E04F7B57C5BD68517482A4DEBA71602241377C962FE053BCA6E3DDBDBB219BA5986DF32067DE4C0130610196596"

    curl -i "10.133.5.201/cgi-bin/smart_device/device_set_public_device?tinyid=2456251308&din=144115192371356180&uin=2456251308&A2key=23E1A99A4012F992939DE88959C68611AC8CF2D08570C8659D4A0E04F7B57C5BD68517482A4DEBA71602241377C962FE053BCA6E3DDBDBB219BA5986DF32067DE4C0130610196596&type=2&name=再次修改的打印机&screenshot=http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/slot4.png&icon=http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/20150507dengdeng.png&summary=求不要再修改了&attribute=1&slot=2&sn=22222&is_reg=0"

    curl -i "172.27.193.254/cgi-bin/smart_device/device_set_public_device?tinyid=2456251308&din=144115194518844570&uin=2456251308&A2key=23E1A99A4012F992939DE88959C68611AC8CF2D08570C8659D4A0E04F7B57C5BD68517482A4DEBA71602241377C962FE053BCA6E3DDBDBB219BA5986DF32067DE4C0130610196596&type=1&name=安凯星期一添加的--5&screenshot=http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/slot4.png&icon=http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/20150507dengdeng.png&summary=摄像头头头头20150629&attribute=1&slot=14&sn=1414141414141&is_reg=0"


{"din":144115192371353530,
"dev_type":2,
"dev_name":"新的打印机",
"dev_screenshot":"http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/slot4.png",
"dev_icon":"http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/20150507dengdeng.png",
"dev_summary":"我是6月11号添加的",
"dev_slot":2,
"dev_sn":"2222"}]}


    curl -i "http://10.192.129.103/cgi-bin/smart_device/device_tools?din=1&uin=0379964426&func=1"

    curl -i "10.130.128.170/cgi-bin/openapi/device_get_binddin_list?appid=1000000290&openid=000000000000000000000000939B8B51&clientkey=A2ED923D50E2CE9ADC6FA96AE8628353C5EC56CFEC135A41DC6AE70E87575E8C1AF8B225423AF0F6569931AE54FB950162713E5EC03AF955C1F1AF2D8A25CDD82EB942405629F1CA&din=144115194518839760&pf=qzone"

2 json cpp文件解析unsigned long long
  	setbusiness_res.set_uint64_din(json_object["uint64_din"].asUInt64());

3 新增加propertyid 做设备群聊区分
	10008 手q给设备发文本群聊消息
	10009 手q给设备发视频群聊消息
	10010 手q给设备发图片群聊消息
	10011 手q给设备发语音群聊消息

4 C2CType0x211_SubC2CType0x11.proto
	申请新的type和subtype 区分群聊消息 做msgDB的存储管理
	proto文件是datapoin的定义，但真正封包还是根据旧文件open_samrt.proto来
	im_msg想取消掉双发，逻辑由后台这边控制，即发给QQ号的走imagent，发给tinyid的走im_msg

5 打印16进制
	char buf[2048*10] = {0};
	for (int i = 0; i < send_msg.size(); ++i)
	{
		snprintf(buf + i*3, 2048*10, "%02X ", send_msg[i]);
	}
16 OTA升级
	mysql -h  10.189.30.34 -u qzone_user -P 3354 -pqzone
	select * from t_target_device;
	update t_target_device set target_md5='a5ad87f7d5b16a058eea63482876a57f' where product_id=1000000363;





2 cmd is im_msg.device_report
3 用户设置群聊标志位
	1 发c2s(im_msg.open_smart_c2s)到open_device_proxy
	2 先去oidb测试环境设置标志位0x5e7
	3 到现网拉绑定者列表
	4 推送到绑定者
  所以170的oidb接口机连到95上，95里面又把0x1806和0x1810连到oidb测试环境，其他命令字走正式环境
4 增加修改proto协议后需要手动链接libimproto.a
	两个使用到的地方，im_s2c_api和link_cloud_s2c_api

规则引擎

动作类型(消息型) 	action_type
消息类型(动态消息)	action_subtype
消息模板(语音消息)	action_final_type
action_type:1(E_ACTION_TYPE_MSG), 
action_subtype:2(E_ACTION_SUBTYPE_DYNAMIC),
action_final_type:1(E_ACTION_FINAL_TYPE_TEXT)


云对接方案
1 yun_api_gw生成包 
	启动./yun_api_gw 
	监听8191
	// {"din":"144115192371362421","a2key":"1234ABCD"} 用工具编解码
curl -i "10.148.142.163:8191/cgi-bin/smart_device/device_get_public_device_list?sdkAppId=1400001204&accountType=653&appIdAt3rd=1400001204&identifier=2456251308&userSig=23E1A99A4012F992939DE88959C68611AC8CF2D08570C8659D4A0E04F7B57C5BD68517482A4DEBA71602241377C962FE053BCA6E3DDBDBB219BA5986DF32067DE4C0130610196596&apn=1&content=%7B%22%64%69%6E%22%3A%22%31%34%34%31%31%35%31%39%32%33%37%31%33%36%32%34%32%31%22%2C%22%61%32%6B%65%79%22%3A%22%31%32%33%34%41%42%43%44%22%7D"

2 推倒重来使用spp微线程cloude_device_proxy 监听8191
	接入sso
	https://test.tim.qq.com:443/v4/yun_device_api_gw/statue?identifier=144115192371362421&usersig=1234ABCD
	curl -i "test.tim.qq.com:443/v4/yun_device_api_gw/statue?identifier=144115192371362421&usersig=1234ABCD"

3 小文件通道下载authkey
	curl -i "http://10.148.142.163/cgi-bin/smart_device/device_download_doc?pid=1000000398&din=144115194518839219&jobnum=12345ABCD&fileid=hellohello&uin=592265304&url=http://www.baidu.com&filename=hello.txt&filetype=1&bid=10001"

	curl -i "http://10.130.128.170/cgi-bin/smart_device/device_download_doc?pid=1000000398&din=144115194518839219&jobnum=12345ABCD&fileid=hellohello&uin=592265304&url=http://www.baidu.com&filename=hello.txt&filetype=1&bid=10001"
	
4 refreshtoken
	 sudo tcpdump -i any host 10.177.150.166 -Xnpls0
	 0x60e带回logintoken(A1只是LT的部分数据) 0xa0f 使用LT来换A2，并不暴露A1

5 din添加测试环境自助地址
	 http://db.server.com/add_test_uin.php?uin=144115194518853178

6 注册云设备

	curl -i "http://10.148.142.163/cgi-bin/smart_device/device_set_cloud_register?pid=1700001149&tinyid=144115196867695350&uin=2351735729&appid=16&dev_type=4&app_version=5.9.0.0&device_name=printer&A2key=D45B067C8C57E956C034C30466132EFF39CAB9F0310329B70D87336406E126A97FFD7A8DF7C45A0810748145C83F9534AEE7F1B038028DA6BE4CAA945CFB25222371BF58874F3881&telnum=15820478555&mobile_serial_num=1234567890&mobile_imei=1234567890&mobile_iccid=1234567890&appname=Mobile%20QQ&device_name=carol%E7%A9%BA%E6%B0%94%E5%87%80%E5%8C%96%E5%99%A82&dev_os_ver=1.0.0&din=1234567890&device_licence_md5=caroltest&device_serial_num=carol-0000000003"

	curl -i "http://10.130.128.170/cgi-bin/smart_device/device_set_cloud_register?pid=1700001149&tinyid=144115196867695350&uin=2351735729&appid=16&dev_type=4&app_version=5.9.0.0&device_name=printer&A2key=D45B067C8C57E956C034C30466132EFF39CAB9F0310329B70D87336406E126A97FFD7A8DF7C45A0810748145C83F9534AEE7F1B038028DA6BE4CAA945CFB25222371BF58874F3881&telnum=15820478555&mobile_serial_num=1234567890&mobile_imei=1234567890&mobile_iccid=1234567890&appname=Mobile%20QQ&device_name=carol%E7%A9%BA%E6%B0%94%E5%87%80%E5%8C%96%E5%99%A82&dev_os_ver=1.0.0&din=1234567890&device_licence_md5=caroltest&device_serial_num=carol-0000000003"

7 调用hp接口推送文件url
	http://qqapp-test.eprintsw.com:80/authsec/access/printjob?jobSeqNo=111111&din=144115192371370269&fileUrl=xx&filename=xx&token=xx
	
	http://iot.qq.com/add?pid=1000000398&sn=35eecbf0bc6e4365

	licence：
	3045022100C1AB77F21639BF5D6C0680F7BB00C1AAEDBE7E7C84600292EA8D8F37DA7E384D02205C3B879C5C1F732297CA4114AD0F184AC1F54029543E0CFBF7B3048457F96906


8 调用hp获取licence
	http://qqapp-test.eprintsw.com/authsec/access/printer/sign?pid=1000000398&sn=35eecbf0bc6e4365&token=XjkMRh4LPLEBzUrJBRckMfKydn8fLbT2ov4wdMWDQB43jLLOJ5M8cCwduPcu0P6vpyRnWhFnt4RqNFthtEjhdSAPaK6xnJHG3Xyuj1SJPT5M5QHq0IsKtMzfcCrCmDdIBCeTznbYJXHwGUt8YzbHLIiPfIisvqfiFluJtElV8cFg2gQqeckIbrCqQ280iQlSqZXGFJyZxnLQ7ZDdAZf2jA96TIdwvkj5DFJG9DkV9Htn5c9XijbaY9UH636NCNGP

9 调用hp接口推送注册信息
	http://qqapp-test.eprintsw.com/authsec/access/printer/binding?pid=1000000398&sn=35eecbf0bc6e4365&din=%llu&dtoken=%s&drefreshtoken=%s&token=%s

10 调用hp接口推送打印文件url
	http://qqapp-test.eprintsw.com/authsec/access/printjob

	jobSeqNo=123445678ABCD&fileUrl=http://183.61.37.36/asn.com/stddownload_common_file?ver=0&openid=144115194518831843&bid=10005&authkey=303D020101043630340201010201010204234D405802030F4241020424253DB702010002030F4242020424253DB702010002045625B21502047568F24E0400&fileid=305902010004523050020100041231343431313531393738313338343638343002030f42410204adea973d020455caa914042066373533316532643065613237323333636530306235663031633562663333350201000201000400&din=144115194518875652&fileName=print.txt

	./tool_linkup_cloud_api 2 144115192371393647 "http://183.61.37.36/asn.com/stddownload_common_file?ver=0&openid=144115194518831843&bid=10005&authkey=303D020101043630340201010201010204234D405802030F4241020424253DB702010002030F4242020424253DB702010002045625DF90020475689FCB0400&fileid=305902010004523050020100041231343431313531393738313338343638343002030f42410204adea973d020455caa914042066373533316532643065613237323333636530306235663031633562663333350201000201000400&filetype=2251&subbid=1000000562"

10 json reader writer
	Json::Value	busibufRes;
	Json::FastWriter fast_writer;
	busibufRes["error_num"] = res_msg.error_num;
	busibufRes["error_msg"] = res_msg.error_msg;
	resbody = fast_writer.write(busibufRes).c_str();

11 惠普错误码
		0	     返回成功
	3260120		与后台通信发生错误
	3260404		未找到符合条件的相关数据
	3260400		参数错误
	3260401		token错误
	3026000		查询失败
	3260405		printer已绑
	3260406		DIN已经绑
	3260407		Printer和DIN重复绑定.

12 设置pidinfo 
	172.25.36.25 iot.open.qq.com
http://iot.open.qq.com/index.php?mod=iot_tools&act=setinfo&pid=1700001250&has_own_cloud=1
	拉取
	http://10.130.128.170/cgi-bin/device/device_get_pid_info?pid=1700001671 测试环境正式环境一致

公共摄像头
拉取视频直播地址
http://10.148.142.163/cgi-bin/smart_device/device_get_public_live_url?appid=515&din=12345678&istest=0

2 cmlb初始化失败
	造成coredump 挂在CMLB_V2_ProcessOnUpdateSvrList
	因为so中链接了老的cmlb api

3 sso证书
	
	测试环境test.tim.qq.com   		对应 正式环境 yun.tim.qq.com 		不支持双向认证 https协商时不要求客户端带上证书
	测试环境openapi-test.tim.qq.com 对应 正式环境 openapi.tim.qq.com 	支持双向认证

	CA(证书授权中心(Certificate Authority))
		作为电子商务交易中受信任的第三方，承担公钥体系中公钥的合法性检验的责任
	证书组成：
		version         v3                                               //遵循X509 V3版本协议
		valid from      2014.1.1
		valid to          2015.6.1
		issue from     Verisign CA
		issue to        my company
		public key     xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
		...   ...
		CA signature xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
		CA SHA1      xxxxxxxxxxxxxxxxxxxxxxxxxxx
	在验证证书的有效性的时候，会验证签名，有效期，公钥长度等等。

	数字证书是一个经证书授权中心数字签名的包含公开密钥拥有者信息以及公开密钥的文件。最简单的证书包含一个公开密钥、名称以及证书授权中心的数字签名。

	如果证书是服务器自己生成，理论上客户端无法知道拿到的公钥是否是服务器的公钥 


	非对称加密
	A --> B
	用公钥加密 私钥解密 --> 加密 解密 (B生成公私钥 把公钥给到A 公钥如果被仿造替换 B收到后解不出来 所以公钥不怕被替换)
	用私钥加密 公钥解密 --> 签名 验证 (A生成公私钥 把公钥给到B 公钥如果被仿造替换 C可以用自己的公私钥假装成A给B发消息 所以A的公钥需要CA的证书证明公钥是属于A的)

	A用自己的公钥去CA申请证书，CA用私钥生成数字证书，证书包涵A的公钥，证书信息，A的信息，有效期等等，
	B接收到A发的请求后，如果证书是在受信任列表中，用CA公钥解开证书，拿到A的公钥，验证是否是A发送的请求



一些通用化的设置
1 访问oidb和cgi访问cmlb配置 
	open.in 文件id 202560
2 api_gw_device的配置
	com_config.xml	文件id 168285
3 oidb包发布
	device_oidb
4 oidb配置 
	spp_oiserver.xml 文件id203002
5 申请临时密码
	http://os.isd.com/pass/query

---------------------ars发布---------------------

编译机发布软链接/data/release/smart_device  对应 cgi机器(10.133.2.9) /data/release/platform/cgi-bin/smart_device
编译机发布软链接/data/release/smart_openapi	对应 cgi机器(10.133.2.9) /data/release/platform/cgi-bin/openapi

自动化扩容
cgi机器扩容的时候需要去im_msg申请备案，访问Imagent的接口(群聊，sendtoQQ不做登陆态校验)
10.133.2.9
10.133.1.201

{"din":11222,"a2key":"1234ABCD"}